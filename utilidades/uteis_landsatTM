/**
 * Function to mask clouds based on the pixel_qa band of Landsat SR data.
 * @param {ee.Image} image Input Landsat SR image
 * @return {ee.Image} Cloudmasked Landsat image
 */
var mascaraNuvem  = function(image) {
  var qa = image.select('pixel_qa');
  // If the cloud bit (5) is set and the cloud confidence (7) is high
  // or the cloud shadow bit is set (3), then it's a bad pixel.
  var cloud = qa.bitwiseAnd(1 << 5)
                  .and(qa.bitwiseAnd(1 << 7))
                  .or(qa.bitwiseAnd(1 << 3));
  // Remove edge pixels that don't occur in all bands
  var mask2 = image.mask().reduce(ee.Reducer.min());
  return image.updateMask(cloud.not()).updateMask(mask2);
};

exports.mascaraNuvem = mascaraNuvem;

exports.importaColecaoLandsat5 = function(dataInicio, dataFim, area){
  return ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
                  .filterDate(dataInicio, dataFim)
                  .filterBounds(area)
                  .map(mascaraNuvem);
};


exports.importaColecaoLandsat7 = function(dataInicio, dataFim, area){
  return ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
                  .filterDate(dataInicio, dataFim)
                  .filterBounds(area)
                  .map(mascaraNuvem);
};


/** 
 * Combinação de bandas 
 * Referência: http://marte.sid.inpe.br/col/dpi.inpe.br/marte/2011/07.22.17.52/doc/p1189.pdf?ibiurl.language=en 
**/
exports.corNatural = {
  bands: ['B3', 'B2', 'B1'],
  min: 0,
  max: 3000,
  gamma: 1.4,
};

exports.falsaCor = {
  bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 3000,
  gamma: 1.4,
};

exports.falsaCorNatural = {
  bands: ['B5', 'B4', 'B3'],
  gamma: 1.4,
};

exports.diferencaAguaTerra = {
  bands: ['B6', 'B5', 'B4'],
  min: 0,
  max: 3000,
  gamma: 1.4,
};

exports.composicao = {
  bands: ['B7', 'B4', 'B3'],
  min: 0,
  max: 3000,
  gamma: 1.4,
};

exports.detalheDeserto = {
  bands: ['B7', 'B5', 'B3'],
  min: 0,
  max: 3000,
  gamma: 1.4,
};